package com.educareapps.jsonreader.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.educareapps.jsonreader.dao.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM".
*/
public class ItemDao extends AbstractDao<Item, Long> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property X = new Property(1, Float.class, "x", false, "X");
        public final static Property Y = new Property(2, Float.class, "y", false, "Y");
        public final static Property Rotation = new Property(3, Integer.class, "rotation", false, "ROTATION");
        public final static Property Key = new Property(4, Long.class, "key", false, "KEY");
        public final static Property IsCircleView = new Property(5, Integer.class, "isCircleView", false, "IS_CIRCLE_VIEW");
        public final static Property CircleColor = new Property(6, Integer.class, "circleColor", false, "CIRCLE_COLOR");
        public final static Property UserText = new Property(7, String.class, "userText", false, "USER_TEXT");
        public final static Property TextColor = new Property(8, Integer.class, "textColor", false, "TEXT_COLOR");
        public final static Property TextSize = new Property(9, Integer.class, "textSize", false, "TEXT_SIZE");
        public final static Property BorderColor = new Property(10, Integer.class, "borderColor", false, "BORDER_COLOR");
        public final static Property BackgroundColor = new Property(11, Integer.class, "backgroundColor", false, "BACKGROUND_COLOR");
        public final static Property Drawable = new Property(12, Integer.class, "drawable", false, "DRAWABLE");
        public final static Property Width = new Property(13, Float.class, "width", false, "WIDTH");
        public final static Property Height = new Property(14, Float.class, "height", false, "HEIGHT");
        public final static Property Left = new Property(15, Float.class, "left", false, "LEFT");
        public final static Property Right = new Property(16, Float.class, "right", false, "RIGHT");
        public final static Property Top = new Property(17, Float.class, "top", false, "TOP");
        public final static Property Bottom = new Property(18, Float.class, "bottom", false, "BOTTOM");
        public final static Property ImagePath = new Property(19, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Type = new Property(20, String.class, "type", false, "TYPE");
        public final static Property CreatedAt = new Property(21, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(22, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Task = new Property(23, Long.class, "task", false, "TASK");
        public final static Property ItemSound = new Property(24, String.class, "itemSound", false, "ITEM_SOUND");
        public final static Property Result = new Property(25, String.class, "result", false, "RESULT");
        public final static Property OpenApp = new Property(26, String.class, "openApp", false, "OPEN_APP");
        public final static Property OpenUrl = new Property(27, String.class, "openUrl", false, "OPEN_URL");
        public final static Property AllowDragDrop = new Property(28, int.class, "allowDragDrop", false, "ALLOW_DRAG_DROP");
        public final static Property DragDropTarget = new Property(29, long.class, "dragDropTarget", false, "DRAG_DROP_TARGET");
        public final static Property CornerRound = new Property(30, int.class, "cornerRound", false, "CORNER_ROUND");
        public final static Property NavigateTo = new Property(31, long.class, "navigateTo", false, "NAVIGATE_TO");
        public final static Property ShowedBy = new Property(32, long.class, "showedBy", false, "SHOWED_BY");
        public final static Property HideBy = new Property(33, long.class, "hideBy", false, "HIDE_BY");
        public final static Property CloseApp = new Property(34, int.class, "closeApp", false, "CLOSE_APP");
        public final static Property FontTypeFace = new Property(35, int.class, "fontTypeFace", false, "FONT_TYPE_FACE");
        public final static Property FontAlign = new Property(36, int.class, "fontAlign", false, "FONT_ALIGN");
        public final static Property AutoPlay = new Property(37, int.class, "autoPlay", false, "AUTO_PLAY");
        public final static Property SoundDelay = new Property(38, int.class, "soundDelay", false, "SOUND_DELAY");
        public final static Property BorderPixel = new Property(39, int.class, "borderPixel", false, "BORDER_PIXEL");
        public final static Property ShowedByTarget = new Property(40, String.class, "showedByTarget", false, "SHOWED_BY_TARGET");
        public final static Property HiddenByTarget = new Property(41, String.class, "hiddenByTarget", false, "HIDDEN_BY_TARGET");
        public final static Property Helper = new Property(42, int.class, "helper", false, "HELPER");
        public final static Property TutorialAnimation = new Property(43, int.class, "tutorialAnimation", false, "TUTORIAL_ANIMATION");
        public final static Property TutorialX = new Property(44, int.class, "tutorialX", false, "TUTORIAL_X");
        public final static Property TutorialY = new Property(45, int.class, "tutorialY", false, "TUTORIAL_Y");
        public final static Property TutorialTag = new Property(46, long.class, "tutorialTag", false, "TUTORIAL_TAG");
        public final static Property ShowedMiniFeedBack = new Property(47, String.class, "showedMiniFeedBack", false, "SHOWED_MINI_FEED_BACK");
        public final static Property HideMiniFeedback = new Property(48, String.class, "hideMiniFeedback", false, "HIDE_MINI_FEEDBACK");
        public final static Property ExtraOne = new Property(49, Integer.class, "extraOne", false, "EXTRA_ONE");
        public final static Property ExtraTwo = new Property(50, Integer.class, "extraTwo", false, "EXTRA_TWO");
        public final static Property ExtraThree = new Property(51, String.class, "extraThree", false, "EXTRA_THREE");
        public final static Property ExtraFour = new Property(52, String.class, "extraFour", false, "EXTRA_FOUR");
        public final static Property ExtraFive = new Property(53, Integer.class, "extraFive", false, "EXTRA_FIVE");
        public final static Property TaskId = new Property(54, long.class, "taskId", false, "TASK_ID");
    };

    private DaoSession daoSession;

    private Query<Item> task_ItemsQuery;

    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"X\" REAL," + // 1: x
                "\"Y\" REAL," + // 2: y
                "\"ROTATION\" INTEGER," + // 3: rotation
                "\"KEY\" INTEGER," + // 4: key
                "\"IS_CIRCLE_VIEW\" INTEGER," + // 5: isCircleView
                "\"CIRCLE_COLOR\" INTEGER," + // 6: circleColor
                "\"USER_TEXT\" TEXT NOT NULL ," + // 7: userText
                "\"TEXT_COLOR\" INTEGER," + // 8: textColor
                "\"TEXT_SIZE\" INTEGER," + // 9: textSize
                "\"BORDER_COLOR\" INTEGER," + // 10: borderColor
                "\"BACKGROUND_COLOR\" INTEGER," + // 11: backgroundColor
                "\"DRAWABLE\" INTEGER," + // 12: drawable
                "\"WIDTH\" REAL," + // 13: width
                "\"HEIGHT\" REAL," + // 14: height
                "\"LEFT\" REAL," + // 15: left
                "\"RIGHT\" REAL," + // 16: right
                "\"TOP\" REAL," + // 17: top
                "\"BOTTOM\" REAL," + // 18: bottom
                "\"IMAGE_PATH\" TEXT NOT NULL ," + // 19: imagePath
                "\"TYPE\" TEXT NOT NULL ," + // 20: type
                "\"CREATED_AT\" INTEGER," + // 21: createdAt
                "\"UPDATED_AT\" INTEGER," + // 22: updatedAt
                "\"TASK\" INTEGER," + // 23: task
                "\"ITEM_SOUND\" TEXT NOT NULL ," + // 24: itemSound
                "\"RESULT\" TEXT NOT NULL ," + // 25: result
                "\"OPEN_APP\" TEXT NOT NULL ," + // 26: openApp
                "\"OPEN_URL\" TEXT NOT NULL ," + // 27: openUrl
                "\"ALLOW_DRAG_DROP\" INTEGER NOT NULL ," + // 28: allowDragDrop
                "\"DRAG_DROP_TARGET\" INTEGER NOT NULL ," + // 29: dragDropTarget
                "\"CORNER_ROUND\" INTEGER NOT NULL ," + // 30: cornerRound
                "\"NAVIGATE_TO\" INTEGER NOT NULL ," + // 31: navigateTo
                "\"SHOWED_BY\" INTEGER NOT NULL ," + // 32: showedBy
                "\"HIDE_BY\" INTEGER NOT NULL ," + // 33: hideBy
                "\"CLOSE_APP\" INTEGER NOT NULL ," + // 34: closeApp
                "\"FONT_TYPE_FACE\" INTEGER NOT NULL ," + // 35: fontTypeFace
                "\"FONT_ALIGN\" INTEGER NOT NULL ," + // 36: fontAlign
                "\"AUTO_PLAY\" INTEGER NOT NULL ," + // 37: autoPlay
                "\"SOUND_DELAY\" INTEGER NOT NULL ," + // 38: soundDelay
                "\"BORDER_PIXEL\" INTEGER NOT NULL ," + // 39: borderPixel
                "\"SHOWED_BY_TARGET\" TEXT NOT NULL ," + // 40: showedByTarget
                "\"HIDDEN_BY_TARGET\" TEXT NOT NULL ," + // 41: hiddenByTarget
                "\"HELPER\" INTEGER NOT NULL ," + // 42: helper
                "\"TUTORIAL_ANIMATION\" INTEGER NOT NULL ," + // 43: tutorialAnimation
                "\"TUTORIAL_X\" INTEGER NOT NULL ," + // 44: tutorialX
                "\"TUTORIAL_Y\" INTEGER NOT NULL ," + // 45: tutorialY
                "\"TUTORIAL_TAG\" INTEGER NOT NULL ," + // 46: tutorialTag
                "\"SHOWED_MINI_FEED_BACK\" TEXT NOT NULL ," + // 47: showedMiniFeedBack
                "\"HIDE_MINI_FEEDBACK\" TEXT NOT NULL ," + // 48: hideMiniFeedback
                "\"EXTRA_ONE\" INTEGER," + // 49: extraOne
                "\"EXTRA_TWO\" INTEGER," + // 50: extraTwo
                "\"EXTRA_THREE\" TEXT," + // 51: extraThree
                "\"EXTRA_FOUR\" TEXT," + // 52: extraFour
                "\"EXTRA_FIVE\" INTEGER," + // 53: extraFive
                "\"TASK_ID\" INTEGER NOT NULL );"); // 54: taskId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float x = entity.getX();
        if (x != null) {
            stmt.bindDouble(2, x);
        }
 
        Float y = entity.getY();
        if (y != null) {
            stmt.bindDouble(3, y);
        }
 
        Integer rotation = entity.getRotation();
        if (rotation != null) {
            stmt.bindLong(4, rotation);
        }
 
        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(5, key);
        }
 
        Integer isCircleView = entity.getIsCircleView();
        if (isCircleView != null) {
            stmt.bindLong(6, isCircleView);
        }
 
        Integer circleColor = entity.getCircleColor();
        if (circleColor != null) {
            stmt.bindLong(7, circleColor);
        }
        stmt.bindString(8, entity.getUserText());
 
        Integer textColor = entity.getTextColor();
        if (textColor != null) {
            stmt.bindLong(9, textColor);
        }
 
        Integer textSize = entity.getTextSize();
        if (textSize != null) {
            stmt.bindLong(10, textSize);
        }
 
        Integer borderColor = entity.getBorderColor();
        if (borderColor != null) {
            stmt.bindLong(11, borderColor);
        }
 
        Integer backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindLong(12, backgroundColor);
        }
 
        Integer drawable = entity.getDrawable();
        if (drawable != null) {
            stmt.bindLong(13, drawable);
        }
 
        Float width = entity.getWidth();
        if (width != null) {
            stmt.bindDouble(14, width);
        }
 
        Float height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Float left = entity.getLeft();
        if (left != null) {
            stmt.bindDouble(16, left);
        }
 
        Float right = entity.getRight();
        if (right != null) {
            stmt.bindDouble(17, right);
        }
 
        Float top = entity.getTop();
        if (top != null) {
            stmt.bindDouble(18, top);
        }
 
        Float bottom = entity.getBottom();
        if (bottom != null) {
            stmt.bindDouble(19, bottom);
        }
        stmt.bindString(20, entity.getImagePath());
        stmt.bindString(21, entity.getType());
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(22, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(23, updatedAt.getTime());
        }
 
        Long task = entity.getTask();
        if (task != null) {
            stmt.bindLong(24, task);
        }
        stmt.bindString(25, entity.getItemSound());
        stmt.bindString(26, entity.getResult());
        stmt.bindString(27, entity.getOpenApp());
        stmt.bindString(28, entity.getOpenUrl());
        stmt.bindLong(29, entity.getAllowDragDrop());
        stmt.bindLong(30, entity.getDragDropTarget());
        stmt.bindLong(31, entity.getCornerRound());
        stmt.bindLong(32, entity.getNavigateTo());
        stmt.bindLong(33, entity.getShowedBy());
        stmt.bindLong(34, entity.getHideBy());
        stmt.bindLong(35, entity.getCloseApp());
        stmt.bindLong(36, entity.getFontTypeFace());
        stmt.bindLong(37, entity.getFontAlign());
        stmt.bindLong(38, entity.getAutoPlay());
        stmt.bindLong(39, entity.getSoundDelay());
        stmt.bindLong(40, entity.getBorderPixel());
        stmt.bindString(41, entity.getShowedByTarget());
        stmt.bindString(42, entity.getHiddenByTarget());
        stmt.bindLong(43, entity.getHelper());
        stmt.bindLong(44, entity.getTutorialAnimation());
        stmt.bindLong(45, entity.getTutorialX());
        stmt.bindLong(46, entity.getTutorialY());
        stmt.bindLong(47, entity.getTutorialTag());
        stmt.bindString(48, entity.getShowedMiniFeedBack());
        stmt.bindString(49, entity.getHideMiniFeedback());
 
        Integer extraOne = entity.getExtraOne();
        if (extraOne != null) {
            stmt.bindLong(50, extraOne);
        }
 
        Integer extraTwo = entity.getExtraTwo();
        if (extraTwo != null) {
            stmt.bindLong(51, extraTwo);
        }
 
        String extraThree = entity.getExtraThree();
        if (extraThree != null) {
            stmt.bindString(52, extraThree);
        }
 
        String extraFour = entity.getExtraFour();
        if (extraFour != null) {
            stmt.bindString(53, extraFour);
        }
 
        Integer extraFive = entity.getExtraFive();
        if (extraFive != null) {
            stmt.bindLong(54, extraFive);
        }
        stmt.bindLong(55, entity.getTaskId());
    }

    @Override
    protected void attachEntity(Item entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // x
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // y
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // rotation
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // key
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isCircleView
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // circleColor
            cursor.getString(offset + 7), // userText
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // textColor
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // textSize
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // borderColor
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // backgroundColor
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // drawable
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // width
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // height
            cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15), // left
            cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16), // right
            cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17), // top
            cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18), // bottom
            cursor.getString(offset + 19), // imagePath
            cursor.getString(offset + 20), // type
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // createdAt
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // updatedAt
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // task
            cursor.getString(offset + 24), // itemSound
            cursor.getString(offset + 25), // result
            cursor.getString(offset + 26), // openApp
            cursor.getString(offset + 27), // openUrl
            cursor.getInt(offset + 28), // allowDragDrop
            cursor.getLong(offset + 29), // dragDropTarget
            cursor.getInt(offset + 30), // cornerRound
            cursor.getLong(offset + 31), // navigateTo
            cursor.getLong(offset + 32), // showedBy
            cursor.getLong(offset + 33), // hideBy
            cursor.getInt(offset + 34), // closeApp
            cursor.getInt(offset + 35), // fontTypeFace
            cursor.getInt(offset + 36), // fontAlign
            cursor.getInt(offset + 37), // autoPlay
            cursor.getInt(offset + 38), // soundDelay
            cursor.getInt(offset + 39), // borderPixel
            cursor.getString(offset + 40), // showedByTarget
            cursor.getString(offset + 41), // hiddenByTarget
            cursor.getInt(offset + 42), // helper
            cursor.getInt(offset + 43), // tutorialAnimation
            cursor.getInt(offset + 44), // tutorialX
            cursor.getInt(offset + 45), // tutorialY
            cursor.getLong(offset + 46), // tutorialTag
            cursor.getString(offset + 47), // showedMiniFeedBack
            cursor.getString(offset + 48), // hideMiniFeedback
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // extraOne
            cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50), // extraTwo
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // extraThree
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // extraFour
            cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53), // extraFive
            cursor.getLong(offset + 54) // taskId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setY(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setRotation(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setKey(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsCircleView(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCircleColor(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUserText(cursor.getString(offset + 7));
        entity.setTextColor(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTextSize(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBorderColor(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBackgroundColor(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDrawable(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setWidth(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setHeight(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setLeft(cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15));
        entity.setRight(cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16));
        entity.setTop(cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17));
        entity.setBottom(cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18));
        entity.setImagePath(cursor.getString(offset + 19));
        entity.setType(cursor.getString(offset + 20));
        entity.setCreatedAt(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setUpdatedAt(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setTask(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setItemSound(cursor.getString(offset + 24));
        entity.setResult(cursor.getString(offset + 25));
        entity.setOpenApp(cursor.getString(offset + 26));
        entity.setOpenUrl(cursor.getString(offset + 27));
        entity.setAllowDragDrop(cursor.getInt(offset + 28));
        entity.setDragDropTarget(cursor.getLong(offset + 29));
        entity.setCornerRound(cursor.getInt(offset + 30));
        entity.setNavigateTo(cursor.getLong(offset + 31));
        entity.setShowedBy(cursor.getLong(offset + 32));
        entity.setHideBy(cursor.getLong(offset + 33));
        entity.setCloseApp(cursor.getInt(offset + 34));
        entity.setFontTypeFace(cursor.getInt(offset + 35));
        entity.setFontAlign(cursor.getInt(offset + 36));
        entity.setAutoPlay(cursor.getInt(offset + 37));
        entity.setSoundDelay(cursor.getInt(offset + 38));
        entity.setBorderPixel(cursor.getInt(offset + 39));
        entity.setShowedByTarget(cursor.getString(offset + 40));
        entity.setHiddenByTarget(cursor.getString(offset + 41));
        entity.setHelper(cursor.getInt(offset + 42));
        entity.setTutorialAnimation(cursor.getInt(offset + 43));
        entity.setTutorialX(cursor.getInt(offset + 44));
        entity.setTutorialY(cursor.getInt(offset + 45));
        entity.setTutorialTag(cursor.getLong(offset + 46));
        entity.setShowedMiniFeedBack(cursor.getString(offset + 47));
        entity.setHideMiniFeedback(cursor.getString(offset + 48));
        entity.setExtraOne(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setExtraTwo(cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50));
        entity.setExtraThree(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setExtraFour(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setExtraFive(cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53));
        entity.setTaskId(cursor.getLong(offset + 54));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of Task. */
    public List<Item> _queryTask_Items(long taskId) {
        synchronized (this) {
            if (task_ItemsQuery == null) {
                QueryBuilder<Item> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_ItemsQuery = queryBuilder.build();
            }
        }
        Query<Item> query = task_ItemsQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

}
